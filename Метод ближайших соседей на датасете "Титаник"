import seaborn as sns 
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import pandas as pd


df = pd.read_csv('https://gist.githubusercontent.com/michhar/2dfd2de0d4f8727f873422c5d959fff5/raw/ff414a1bcfcba32481e4d4e8db578e55872a2ca1/titanic.csv', sep='\t')

df['Sex'] = df['Sex'].map({'male': 1, 'female':0}) #поскольку выживаемость может зависеть от пола, перевожу пол в числовой формат
df.head() 

df.fillna(method='pad', inplace=True) # убираю пропущенные значения, не забываю сохранить изменения, иначе работать не будет
X = df.drop(['Survived', 'Name', 'Ticket', 'Cabin', 'PassengerId', 'Embarked'],  axis=1) 
# задаю Иксы, с форматом которых мы уже умеем работать
y = df['Survived'] # а вот то, что мы ищем

X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.2, random_state=777)
                                                    
params_grid = {
    'n_neighbors': range(1,100,2), # Перебираем от 1 до 100 с шагом 2
    'weights': ['uniform', 'distance'], # с каким весом берём каждого соседа. uniform - с одинаковым, distance - обратно пропорционально расстоянию. 
    'algorithm': ['auto'], # алгоритм поиска ближайших соседей. Влияет только на скорость обучения
    'leaf_size': [30], # параметры некоторых алгоритмов поиска ближ соседей. Влияет только на скорость обучения
    'metric': ['minkowski'], # метрика расстояния, используемая в алгоритме поиска ближайших соседей
    'p': [2] # параметр метрики, используемой в методе ближайших соседей 
}

best_params = {}
best_acc = 0

for n_neighbours in params_grid['n_neighbors']:
    for weights in params_grid['weights']:
        for alg in params_grid['algorithm']:
            for leaf_size in params_grid['leaf_size']:
                for metric in params_grid['metric']:
                    for p in params_grid['p']:
                        params = {'n_neighbors': n_neighbours,
                                  'weights': weights,
                                  'algorithm': alg,
                                  'leaf_size': leaf_size,
                                  'metric': metric,
                                  'p': p }
                        clf = KNeighborsClassifier(**params)
                        clf.fit(X_train, y_train)
                        y_pred = clf.predict(X_test)
                        acc = accuracy_score(y_test, y_pred)
                        if acc > best_acc:
                            best_acc = acc
                            best_params = params

print('Best accuracy: %f' % best_acc)
print(best_params)
